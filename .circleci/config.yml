version: 2.1

# orbs:
  #slack: circleci/slack@4.1.4
  #aws-cli: circleci/aws-cli@1.3.0
parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"
  memstash-token:
    type: string
    default: "91b68998-2d69-4b31-93c2-4f3f42925a80"
commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "crypto-<< pipeline.parameters.workflow-id >>"
            exit 0    
jobs:
  Spinup-Test-Python:
    docker:
      - image: circleci/python:3.9.7-buster
    steps:
      - checkout
      - run:
          name: Install cryptocmd application
          working_directory: ~/
          command: pip install cryptocmd && pip install pandas && pip install pylint
      - run:
          name: Lint the code
          working_directory: ~/project/scripts/
          command: |
            pylint cryptotest.py
            # pylint --help
            # python3 -V
      - run:
          name: Get files from scripts folder
          working_directory: ~/project/scripts/
          command: |
            sudo chmod 755 cryptotest.py
            python3 cryptotest.py > DecNumbers.txt
            head -n 10 DecNumbers.txt
      - save_cache:
          paths: [scripts]
          key: crypto-app

  AWS-cloudformation-infra:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [crypto-app]
      - run:
          name: Install dependancies
          command: yum install -y tar gzip
      - run:
          name: Ensure cloud backend exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="Crypto-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "Crypto-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - run:
          name: Check for DecNumbers.txt file
          command: |
            ls -la ~/
            ls -la ~/project/.circleci
            ls -la ~/project/scripts
      - save_cache:
          key: build-infra
          paths: [./circleci/ansible/inventory.txt]

      # - persist_to_workspace:
      #     root: ~/
      #     paths:
      #       - project/.circleci/inventory.txt
      
      - destroy-environment

  #Linting:
  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["ea:0b:03:95:59:96:f5:4b:c2:dd:3c:83:a5:40:35:c6"]
      - restore_cache:
          keys: [crypto-app, build-infra]
      - run:
          name: Install dependancies
          working_directory: ./.circleci/ansible
          command: |
            apk add --upgrade ansible
            ansible --version
            pip3 install --upgrade pip
            pip3 install awscli
            aws --version
      - run:
          name: Configure server
          working_directory: ./.circleci/ansible
          command: |
            pwd
            # ls -la 
            # ls -la ../../
            # cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml -vvv
      - destroy-environment

  Smoke-Test-application:
    docker:
      - image: circleci/python:3.9.7-buster
    steps:
      - checkout
      - run:
          name: install dependancies
          working_directory: ~/
          command: pip install cryptocmd pandas
      - run:
          name: test script
          working_directory: ~/project/scripts
          command: |
            python3 cryptotest.py

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: old stack workflow id / remove old stack and files
          command: |
            export OldWorkflowID=$(aws cloudformation \
             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
             --no-paginate --output text)      
            
            echo "${OldWorkflowID}"

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter "CREATE_COMPLETE" --no-paginate --output text)) 
            echo Old Workflow Id: "${OldWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID}"
            echo "${STACKS}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then 
              aws cloudformation delete-stack --stack-name "crypto-${OldWorkflowID}"
            fi

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
    Spinup-Test-Python:
      jobs:
        - Spinup-Test-Python
        - AWS-cloudformation-infra
        # -  Linting:
          #  requires: [AWS-cloudformation-infra]
        # -  Smoke-Test-application
          #  requires: [Linting]
        - configure-infrastructure:
            requires: [AWS-cloudformation-infra]
        - cleanup:
            requires: [configure-infrastructure]
