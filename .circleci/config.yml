version: 2.1

orbs:
  # slack: circleci/slack@4.1.4
  # aws-cli: circleci/aws-cli@1.3.0
  kubernetes: circleci/kubernetes@0.12.0
  docker: circleci/docker@1.7.0
  
parameters:
  workflow-id:
    type: string
    default: "${CIRCLE_WORKFLOW_ID:0:7}"
  memstash-token:
    type: string
    default: "91b68998-2d69-4b31-93c2-4f3f42925a80"
commands:
  destroy-environment:
    description: Destroy cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "crypto-<< pipeline.parameters.workflow-id >>"
            exit 0    
jobs:
  Spinup-Test-Python:
    docker:
      - image: circleci/python:3.9.7-buster
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependancies-{{ checksum "~/project/scripts/requirements.txt" }}
            - v1-dependancies-
      - run:
          name: Install cryptocmd application
          working_directory: ~/project/scripts/
          command: |
            make setup
            . ~/.devops/bin/activate
            make install
      - run:
          name: Lint the code
          working_directory: ~/project/scripts/
          command: |
            . ~/.devops/bin/activate
            make lint
      - setup_remote_docker:
          version: 19.03.13
      # - run:
      #     name: Build docker image
      #     command: | 
      #       make dockerflask
      # try to use orb instead
      - docker/publish:
          docker-context: .
          image: $CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
          path: Dockerfile
      - docker/check
      - run:
          name: Push docker image
          command: |
            make dockerpush

      - save_cache:
          paths:
            - ./devops
          key: v1-dependancies-{{ checksum "~/project/scripts/requirements.txt" }}

  Linting:
    docker:
      - image: circleci/python:3.9.7-buster
    steps:
      - checkout
      - restore_cache:
          keys: [crypto-app]

      - run:
          name: install hadolint
          working_directory: ~/project/scripts
          command: |
            make setup
            make install
            make lint
            # make dockerflask
            # make kubernetesdeploy
  
  Smoke-Test-application:
    docker:
      - image: circleci/python:3.9.7-buster
    steps:
      - checkout
      - run:
          name: install dependancies
          working_directory: ~/
          command: pip install cryptocmd pandas 
      - run:
          name: install nginx
          working_directory: ~/project/scripts
          command: |
            sudo apt install nginx

      - run:
          name: Check results
          working_directory: ~/project/scripts
          command: |
            python cryptotest.py > results.txt
      - run:
          name: copy to nginx directory
          working_directory: ~/project/scripts          
          command: |
            cat results.txt

## Take out AWS-cloudformation steps for the time being since it is problematic
  AWS-cloudformation-infra:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - restore_cache:
          keys: [crypto-app]
      - run:
          name: Check for archive
          working_directory: ~/project/scripts/
          command: |
            ls -lah
            pwd
      - run:
          name: make archive to copy to production
          command: |
            tar -C ~/project/scripts/ -czvf archive.tar.gz .
            ls -alrt
      - run:
          name: Install dependancies
          command: |
            apk add --update curl ansible
            pip install --upgrade pip
            pip install awscli
            aws --version
      - run:
          name: Ensure cloud backend exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project="Crypto-${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name "Crypto-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add to ansible inventory
          command: |
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
      - run:
          name: execute ansible against playbook
          working_directory: .circleci/ansible/
          command: |
            ansible-playbook -i inventory.txt configure-server.yml -vvv

      - save_cache:
          key: build-infra
          paths: [./.circleci/ansible/inventory.txt]
      
      - destroy-environment

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: old stack workflow id / remove old stack and files
          command: |
            export OldWorkflowID=$(aws cloudformation \
             list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
             --no-paginate --output text)      
            
            echo "${OldWorkflowID}"

            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
            --stack-status-filter "CREATE_COMPLETE" --no-paginate --output text)) 
            echo Old Workflow Id: "${OldWorkflowID}"
            echo Current Workflow Id: "${CIRCLE_WORKFLOW_ID}"
            echo "${STACKS}"
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then 
              aws cloudformation delete-stack --stack-name "crypto-${OldWorkflowID}"
            fi

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
    Spinup-Test-Python:
      jobs:
        - Spinup-Test-Python
        # -  Linting:
        #     requires: [Spinup-Test-Python]
        # - Smoke-Test-application:
        #     requires: [Linting]
        # - AWS-cloudformation-infra
        #     # requires: [Smoke-Test-application]
        # - cleanup:
        #     requires: [AWS-cloudformation-infra]
